:const jumpHeight -15
:const gravityStrength 2

:alias a_temp      vd
:alias a_partialDY v7
:alias a_bgx       v8
:alias a_bgy       v9
:alias a_bgTicker  va


#################################
#
#  Player Data
#

:alias a_playerX             v0
:alias a_playerY             v1
:alias a_playerPrevX         v2
:alias a_playerPrevY         v3
:alias a_playerSpeedX        v4
:alias a_playerSpeedY        v5
:alias a_playerJumpAvailable v6


#################################
#
#  Game Loop
#

: main
	hires
	loop
		checkScrolling
		input
		drawAmy 
		checkCollisionH 
		gravity
		checkCollisionV
		delayFPS
		drawAmy
	again
;

: checkScrolling
	# when player gets too far down, scroll up and draw more level 
	if a_playerY > 30 begin
		scroll
	end
;

: input
	# store the previous x position in case of collision

	a_playerPrevX := a_playerX

	a_temp := 5
	if a_temp key then if a_playerJumpAvailable == 1 begin
		a_playerJumpAvailable := 0
    a_playerSpeedY := jumpHeight
	end
	a_temp := 7 if a_temp key then a_playerX += -1
	a_temp := 9 if a_temp key then a_playerX += 1
;

: drawAmy
	i := amy
	sprite a_playerX a_playerY 6
;

: checkCollisionH
	if vf == 1 begin
		drawAmy
		a_playerX := a_playerPrevX
		drawAmy
	end
;

: gravity
	a_playerSpeedY += gravityStrength
;

: checkCollisionV
	# a_temp is the direction the player is traveling

	# a_partialDY is shifted right twice from actual DY.
	# a_partialDY is what's actually used to calculate the new position.
	# this is so dy can be increased or decreased more finely
	# might want to do that same with a_playerY also?

	# < 128 is (probably) positive and > 128 is (probably) negative

	if a_playerSpeedY < 128 begin
		a_temp := 1
		a_partialDY >>= a_playerSpeedY
		a_partialDY >>= a_partialDY
	end 

	if a_playerSpeedY > 128 begin
		a_temp := -1
		a_partialDY >>= a_playerSpeedY
		a_partialDY >>= a_partialDY
		a_partialDY += 0b11000000
	end
	
	if a_partialDY == 0 then return

	# collide slowly-
	# undraw amy, redraw amy one pixel in the y direction and see if she collides
	# if she ever does, revert back one position and exit
	
	loop	
		drawAmy
		a_partialDY -= a_temp
		a_playerY += a_temp
		drawAmy
		if vf != 0 begin
			if a_temp == 1 then a_playerJumpAvailable := 1
			a_playerSpeedY := 0
			drawAmy
			a_playerY -= a_temp
			drawAmy
			return
		end
	if a_partialDY != 0 then again
;

: delayFPS
	# delay loop to lock framerate and prevent flicker
	loop
		a_temp := delay
		if a_temp != 0 then again
	a_temp := 3
	delay := a_temp
;

: scroll
	a_playerY += -30
	scroll-up 15
	scroll-up 15
	drawBG
;

: drawBG
	# drawing pixels to walk on!
	i := main
	a_temp := random 0b0001111
	i += a_temp
	a_temp := 0
	a_bgx := 0
	if a_bgTicker == 1 then a_bgx := 16
	a_bgy := 54
	loop
		sprite a_bgx a_bgy 8
		a_bgx += 8
		a_temp += 1
	if a_temp < 14 then again
	a_temp := a_bgTicker
	a_bgTicker := 1
	a_bgTicker -= a_temp
;

: amy
0b111
0b010
0b111
0b111
0b101
0b101

